diff --git a/js-1.8.5/js/src/Makefile.in b/js-1.8.5/js/src/Makefile.in
index a85e055..5e62eb3 100644
--- a/js-1.8.5/js/src/Makefile.in
+++ b/js-1.8.5/js/src/Makefile.in
@@ -888,8 +888,8 @@ endif
 ifeq (,$(HOST_BIN_SUFFIX))
 	mv -f $(SHLIB_ANY_VER) $(SHLIB_EXACT_VER)
 	@[ ! -h $(SHLIB_ABI_VER) ] || rm -f $(SHLIB_ABI_VER)
-	ln -s $(SHLIB_EXACT_VER) $(SHLIB_ABI_VER)
-	ln -s $(SHLIB_ABI_VER) $(SHLIB_ANY_VER)
+	ln -s -r $(SHLIB_EXACT_VER) $(SHLIB_ABI_VER)
+	ln -s -r $(SHLIB_ABI_VER) $(SHLIB_ANY_VER)
 endif
 endif
 ifneq (,$(IMPORT_LIBRARY))
@@ -968,11 +968,11 @@ endif
 # Needed to "configure" it correctly.  Unfortunately these
 # flags wind up being applied to all code in js/src, not just
 # the code in js/src/assembler.
-CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
 
 INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
 
 ifdef ENABLE_METHODJIT
+CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
 # Build a standalone test program that exercises the assembler
 # sources a bit.
 TESTMAIN_OBJS = \
@@ -987,6 +987,8 @@ TESTMAIN_OBJS = \
 		jslog2.$(OBJ_SUFFIX)
 TestMain$(HOST_BIN_SUFFIX): $(TESTMAIN_OBJS)
 	$(CXX) -o TestMain$(HOST_BIN_SUFFIX) $(TESTMAIN_OBJS)
+else
+CXXFLAGS += -DUSE_SYSTEM_MALLOC=1
 endif
 
 #
diff --git a/js-1.8.5/js/src/assembler/assembler/MacroAssemblerX86Common.cpp b/js-1.8.5/js/src/assembler/assembler/MacroAssemblerX86Common.cpp
index 1477815..11f4062 100644
--- a/js-1.8.5/js/src/assembler/assembler/MacroAssemblerX86Common.cpp
+++ b/js-1.8.5/js/src/assembler/assembler/MacroAssemblerX86Common.cpp
@@ -42,10 +42,14 @@
 /* SSE checks only make sense on Intel platforms. */
 #if WTF_CPU_X86 || WTF_CPU_X86_64
 
+#if ENABLE_ASSEMBLER
+
 #include "MacroAssemblerX86Common.h"
 
 using namespace JSC;
 MacroAssemblerX86Common::SSECheckState MacroAssemblerX86Common::s_sseCheckState = NotCheckedSSE;
 
+#endif // ENABLE(ASSEMBLER)
+
 #endif /* WTF_CPU_X86 || WTF_CPU_X86_64 */
 
diff --git a/js-1.8.5/js/src/assembler/wtf/Platform.h b/js-1.8.5/js/src/assembler/wtf/Platform.h
index 3dfad2a..63d1594 100644
--- a/js-1.8.5/js/src/assembler/wtf/Platform.h
+++ b/js-1.8.5/js/src/assembler/wtf/Platform.h
@@ -179,7 +179,8 @@
 
 /* CPU(ARM) - ARM, any version*/
 #if   defined(arm) \
-   || defined(__arm__)
+   || defined(__arm__) \
+   || defined(__aarch64__)
 #define WTF_CPU_ARM 1
 
 #if defined(__ARMEB__)
@@ -223,6 +224,9 @@
    || defined(__ARM_ARCH_7R__)
 #define WTF_ARM_ARCH_VERSION 7
 
+#elif defined(__aarch64__)
+#define WTF_ARM_ARCH_VERSION 64
+
 /* RVCT sets _TARGET_ARCH_ARM */
 #elif defined(__TARGET_ARCH_ARM)
 #define WTF_ARM_ARCH_VERSION __TARGET_ARCH_ARM
@@ -293,7 +297,6 @@
 #endif /* ARM */
 
 
-
 /* Operating systems - low-level dependencies */
 
 /* PLATFORM(DARWIN) */
@@ -922,7 +925,8 @@ on MinGW. See https://bugs.webkit.org/show_bug.cgi?id=29268 */
  || WTF_CPU_X86_64 \
  || WTF_CPU_ARM_TRADITIONAL \
  || WTF_CPU_ARM_THUMB2 \
- || WTF_CPU_X86)
+ || WTF_CPU_X86) \
+ && !JS_DISABLE_YARR_JIT
 #define ENABLE_YARR_JIT 1
 #else
 #define ENABLE_YARR_JIT 0
diff --git a/js-1.8.5/js/src/configure b/js-1.8.5/js/src/configure
index 8a0543e..a491fe1 100755
--- a/js-1.8.5/js/src/configure
+++ b/js-1.8.5/js/src/configure
@@ -71,6 +71,8 @@ ac_help="$ac_help
   --disable-tracejit      Disable tracing JIT support"
 ac_help="$ac_help
   --enable-methodjit-spew      Enable method JIT spew support"
+ac_help="$ac_help
+  --disable-yarrjit       Disable YARR JIT support"
 ac_help="$ac_help
   --enable-dtrace         build with dtrace support if available (default=no)"
 ac_help="$ac_help
@@ -7985,6 +7987,19 @@ if test "${enable_methodjit_spew+set}" = set; then
 fi
 
 
+# Check whether --enable-yarrjit or --disable-yarrjit was given.
+if test "${enable_yarrjit+set}" = set; then
+  enableval="$enable_yarrjit"
+  if test "$enableval" = "no"; then
+    DISABLE_YARR_JIT=1
+  elif test "$enableval" = "yes"; then
+    DISABLE_YARR_JIT= 
+  else
+    { echo "configure: error: Option, yarrjit, does not take an argument ($enableval)." 1>&2; exit 1; }
+  fi
+fi
+
+
 
 
 if test "$ENABLE_METHODJIT"; then
@@ -8022,6 +8037,13 @@ EOF
 
 fi
 
+if test "$DISABLE_YARR_JIT"; then
+    cat >> confdefs.h <<\EOF
+#define JS_DISABLE_YARR_JIT 1
+EOF
+
+fi
+
 if test "$ENABLE_TRACEJIT"; then
 
 cat >> confdefs.h <<\EOF
@@ -13326,9 +13348,9 @@ elif test "$MOZ_ARM_ARCH" = "armv7"; then
 #define MOZ_ARM_ARCH 1
 EOF
 
-        CFLAGS="$CFLAGS -march=armv7-a -marm -mfloat-abi=softfp $MOZ_ARM_VFP_FLAGS"
-        CXXFLAGS="$CXXFLAGS -march=armv7-a -marm -mfloat-abi=softfp $MOZ_ARM_VFP_FLAGS"
-        ASFLAGS="$ASFLAGS -march=armv7-a -marm -mfloat-abi=softfp $MOZ_ARM_VFP_FLAGS"
+        CFLAGS="$CFLAGS -march=armv7-a -marm -mfloat-abi=hard $MOZ_ARM_VFP_FLAGS"
+        CXXFLAGS="$CXXFLAGS -march=armv7-a -marm -mfloat-abi=hard $MOZ_ARM_VFP_FLAGS"
+        ASFLAGS="$ASFLAGS -march=armv7-a -marm -mfloat-abi=hard $MOZ_ARM_VFP_FLAGS"
       else
         { echo "configure: error: --with-cpu-arch=armv7 is not supported for non-GNU toolchains" 1>&2; exit 1; }
       fi
diff --git a/js-1.8.5/js/src/jsapi.cpp b/js-1.8.5/js/src/jsapi.cpp
index 7ba4ea6..a31567c 100644
--- a/js-1.8.5/js/src/jsapi.cpp
+++ b/js-1.8.5/js/src/jsapi.cpp
@@ -3985,7 +3985,7 @@ JS_Enumerate(JSContext *cx, JSObject *obj)
     AutoIdVector props(cx);
     JSIdArray *ida;
     if (!GetPropertyNames(cx, obj, JSITER_OWNONLY, &props) || !VectorToIdArray(cx, props, &ida))
-        return false;
+        return NULL;
     for (size_t n = 0; n < size_t(ida->length); ++n)
         JS_ASSERT(js_CheckForStringIndex(ida->vector[n]) == ida->vector[n]);
     return ida;
diff --git a/js-1.8.5/js/src/jsfun.cpp b/js-1.8.5/js/src/jsfun.cpp
index d9dd529..3dec9b7 100644
--- a/js-1.8.5/js/src/jsfun.cpp
+++ b/js-1.8.5/js/src/jsfun.cpp
@@ -2051,7 +2051,7 @@ fun_toStringHelper(JSContext *cx, JSObject *obj, uintN indent)
 
     JSString *str = JS_DecompileFunction(cx, fun, indent);
     if (!str)
-        return false;
+        return NULL;
 
     if (!indent)
         cx->compartment->toSourceCache.put(fun, str);
@@ -2657,7 +2657,7 @@ LookupInterpretedFunctionPrototype(JSContext *cx, JSObject *funobj)
     const Shape *shape = funobj->nativeLookup(id);
     if (!shape) {
         if (!ResolveInterpretedFunctionPrototype(cx, funobj))
-            return false;
+            return NULL;
         shape = funobj->nativeLookup(id);
     }
     JS_ASSERT(!shape->configurable());
diff --git a/js-1.8.5/js/src/jsiter.cpp b/js-1.8.5/js/src/jsiter.cpp
index 8d8a62f..5ba46ff 100644
--- a/js-1.8.5/js/src/jsiter.cpp
+++ b/js-1.8.5/js/src/jsiter.cpp
@@ -425,7 +425,7 @@ NewIteratorObject(JSContext *cx, uintN flags)
          */
         JSObject *obj = js_NewGCObject(cx, FINALIZE_OBJECT0);
         if (!obj)
-            return false;
+            return NULL;
         obj->init(cx, &js_IteratorClass, NULL, NULL, NULL, false);
         obj->setMap(cx->compartment->emptyEnumeratorShape);
         return obj;
diff --git a/js-1.8.5/js/src/jsparse.cpp b/js-1.8.5/js/src/jsparse.cpp
index c735970..b9cc2aa 100644
--- a/js-1.8.5/js/src/jsparse.cpp
+++ b/js-1.8.5/js/src/jsparse.cpp
@@ -3352,7 +3352,7 @@ Parser::functionDef(JSAtom *funAtom, FunctionType type, uintN lambda)
     if (!outertc->inFunction() && bodyLevel && funAtom && !lambda && outertc->compiling()) {
         JS_ASSERT(pn->pn_cookie.isFree());
         if (!DefineGlobal(pn, outertc->asCodeGenerator(), funAtom))
-            return false;
+            return NULL;
     }
 
     pn->pn_blockid = outertc->blockid();
diff --git a/js-1.8.5/js/src/jsstr.cpp b/js-1.8.5/js/src/jsstr.cpp
index cb5c87d..8dbee46 100644
--- a/js-1.8.5/js/src/jsstr.cpp
+++ b/js-1.8.5/js/src/jsstr.cpp
@@ -1734,7 +1734,7 @@ class RegExpGuard
         if (flat) {
             patstr = flattenPattern(cx, fm.patstr);
             if (!patstr)
-                return false;
+                return NULL;
         } else {
             patstr = fm.patstr;
         }
diff --git a/js-1.8.5/js/src/jstypedarray.cpp b/js-1.8.5/js/src/jstypedarray.cpp
index 8975fb1..64e5e3f 100644
--- a/js-1.8.5/js/src/jstypedarray.cpp
+++ b/js-1.8.5/js/src/jstypedarray.cpp
@@ -1334,7 +1334,7 @@ class TypedArrayTemplate
         if (size != 0 && count >= INT32_MAX / size) {
             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
                                  JSMSG_NEED_DIET, "size and count");
-            return false;
+            return NULL;
         }
 
         int32 bytelen = size * count;
@@ -1668,7 +1668,7 @@ TypedArrayConstruct(JSContext *cx, jsint atype, uintN argc, Value *argv)
 
       default:
         JS_NOT_REACHED("shouldn't have gotten here");
-        return false;
+        return NULL;
     }
 }
 
diff --git a/js-1.8.5/js/src/jstypes.h b/js-1.8.5/js/src/jstypes.h
index c2103d8..9f68179 100644
--- a/js-1.8.5/js/src/jstypes.h
+++ b/js-1.8.5/js/src/jstypes.h
@@ -391,8 +391,8 @@ typedef JSUintPtr JSUptrdiff;
 **      just as you would C int-valued conditions.
 ************************************************************************/
 typedef JSIntn JSBool;
-#define JS_TRUE (JSIntn)1
-#define JS_FALSE (JSIntn)0
+#define JS_TRUE 1
+#define JS_FALSE 0
 /*
 ** Special: JS_NEITHER is used by the tracer to have tri-state booleans.
 ** This should not be used in new code.
