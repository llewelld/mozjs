diff -ruN js-1.8.5/js/src/assembler/wtf/Platform.h js-1.8.5/js/src/assembler/wtf/Platform.h
--- js-1.8.5/js/src/assembler/wtf/Platform.h	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/assembler/wtf/Platform.h	2023-03-18 21:33:11.761286470 +0000
@@ -179,7 +179,8 @@
 
 /* CPU(ARM) - ARM, any version*/
 #if   defined(arm) \
-   || defined(__arm__)
+   || defined(__arm__) \
+   || defined(__aarch64__)
 #define WTF_CPU_ARM 1
 
 #if defined(__ARMEB__)
@@ -223,6 +224,9 @@
    || defined(__ARM_ARCH_7R__)
 #define WTF_ARM_ARCH_VERSION 7
 
+#elif defined(__aarch64__)
+#define WTF_ARM_ARCH_VERSION 64
+
 /* RVCT sets _TARGET_ARCH_ARM */
 #elif defined(__TARGET_ARCH_ARM)
 #define WTF_ARM_ARCH_VERSION __TARGET_ARCH_ARM
@@ -293,7 +297,6 @@
 #endif /* ARM */
 
 
-
 /* Operating systems - low-level dependencies */
 
 /* PLATFORM(DARWIN) */
@@ -920,7 +923,7 @@
 /* YARR supports x86 & x86-64, and has been tested on Mac and Windows. */
 #if (WTF_CPU_X86 \
  || WTF_CPU_X86_64 \
- || WTF_CPU_ARM_TRADITIONAL \
+ || (WTF_CPU_ARM_TRADITIONAL && !WTF_ARM_ARCH_AT_LEAST(64)) \
  || WTF_CPU_ARM_THUMB2 \
  || WTF_CPU_X86)
 #define ENABLE_YARR_JIT 1
diff -ruN js-1.8.5/js/src/jsapi.cpp js-1.8.5/js/src/jsapi.cpp
--- js-1.8.5/js/src/jsapi.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsapi.cpp	2023-03-18 21:00:24.873972665 +0000
@@ -3985,7 +3985,7 @@
     AutoIdVector props(cx);
     JSIdArray *ida;
     if (!GetPropertyNames(cx, obj, JSITER_OWNONLY, &props) || !VectorToIdArray(cx, props, &ida))
-        return false;
+        return NULL;
     for (size_t n = 0; n < size_t(ida->length); ++n)
         JS_ASSERT(js_CheckForStringIndex(ida->vector[n]) == ida->vector[n]);
     return ida;
diff -ruN js-1.8.5/js/src/jsfun.cpp js-1.8.5/js/src/jsfun.cpp
--- js-1.8.5/js/src/jsfun.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsfun.cpp	2023-03-18 12:43:03.714834122 +0000
@@ -2051,7 +2051,7 @@
 
     JSString *str = JS_DecompileFunction(cx, fun, indent);
     if (!str)
-        return false;
+        return NULL;
 
     if (!indent)
         cx->compartment->toSourceCache.put(fun, str);
@@ -2657,7 +2657,7 @@
     const Shape *shape = funobj->nativeLookup(id);
     if (!shape) {
         if (!ResolveInterpretedFunctionPrototype(cx, funobj))
-            return false;
+            return NULL;
         shape = funobj->nativeLookup(id);
     }
     JS_ASSERT(!shape->configurable());
diff -ruN js-1.8.5/js/src/jsiter.cpp js-1.8.5/js/src/jsiter.cpp
--- js-1.8.5/js/src/jsiter.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsiter.cpp	2023-03-18 12:44:59.988000280 +0000
@@ -425,7 +425,7 @@
          */
         JSObject *obj = js_NewGCObject(cx, FINALIZE_OBJECT0);
         if (!obj)
-            return false;
+            return NULL;
         obj->init(cx, &js_IteratorClass, NULL, NULL, NULL, false);
         obj->setMap(cx->compartment->emptyEnumeratorShape);
         return obj;
diff -ruN js-1.8.5/js/src/jsparse.cpp js-1.8.5/js/src/jsparse.cpp
--- js-1.8.5/js/src/jsparse.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsparse.cpp	2023-03-18 12:46:48.141106093 +0000
@@ -3352,7 +3352,7 @@
     if (!outertc->inFunction() && bodyLevel && funAtom && !lambda && outertc->compiling()) {
         JS_ASSERT(pn->pn_cookie.isFree());
         if (!DefineGlobal(pn, outertc->asCodeGenerator(), funAtom))
-            return false;
+            return NULL;
     }
 
     pn->pn_blockid = outertc->blockid();
diff -ruN js-1.8.5/js/src/jsstr.cpp js-1.8.5/js/src/jsstr.cpp
--- js-1.8.5/js/src/jsstr.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jsstr.cpp	2023-03-18 12:48:46.966339768 +0000
@@ -1734,7 +1734,7 @@
         if (flat) {
             patstr = flattenPattern(cx, fm.patstr);
             if (!patstr)
-                return false;
+                return NULL;
         } else {
             patstr = fm.patstr;
         }
diff -ruN js-1.8.5/js/src/jstypedarray.cpp js-1.8.5/js/src/jstypedarray.cpp
--- js-1.8.5/js/src/jstypedarray.cpp	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jstypedarray.cpp	2023-03-18 12:57:46.336094437 +0000
@@ -1334,7 +1334,7 @@
         if (size != 0 && count >= INT32_MAX / size) {
             JS_ReportErrorNumber(cx, js_GetErrorMessage, NULL,
                                  JSMSG_NEED_DIET, "size and count");
-            return false;
+            return NULL;
         }
 
         int32 bytelen = size * count;
@@ -1668,7 +1668,7 @@
 
       default:
         JS_NOT_REACHED("shouldn't have gotten here");
-        return false;
+        return NULL;
     }
 }
 
diff -ruN js-1.8.5/js/src/jstypes.h js-1.8.5/js/src/jstypes.h
--- js-1.8.5/js/src/jstypes.h	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/jstypes.h	2023-03-18 12:51:42.608191059 +0000
@@ -391,8 +391,8 @@
 **      just as you would C int-valued conditions.
 ************************************************************************/
 typedef JSIntn JSBool;
-#define JS_TRUE (JSIntn)1
-#define JS_FALSE (JSIntn)0
+#define JS_TRUE 1
+#define JS_FALSE 0
 /*
 ** Special: JS_NEITHER is used by the tracer to have tri-state booleans.
 ** This should not be used in new code.
diff -ruN js-1.8.5/js/src/Makefile.in js-1.8.5/js/src/Makefile.in
--- js-1.8.5/js/src/Makefile.in	2011-03-31 20:08:36.000000000 +0100
+++ js-1.8.5/js/src/Makefile.in	2023-03-19 12:50:26.783576540 +0000
@@ -888,8 +888,8 @@
 ifeq (,$(HOST_BIN_SUFFIX))
 	mv -f $(SHLIB_ANY_VER) $(SHLIB_EXACT_VER)
 	@[ ! -h $(SHLIB_ABI_VER) ] || rm -f $(SHLIB_ABI_VER)
-	ln -s $(SHLIB_EXACT_VER) $(SHLIB_ABI_VER)
-	ln -s $(SHLIB_ABI_VER) $(SHLIB_ANY_VER)
+	ln -s -r $(SHLIB_EXACT_VER) $(SHLIB_ABI_VER)
+	ln -s -r $(SHLIB_ABI_VER) $(SHLIB_ANY_VER)
 endif
 endif
 ifneq (,$(IMPORT_LIBRARY))
@@ -968,11 +968,11 @@
 # Needed to "configure" it correctly.  Unfortunately these
 # flags wind up being applied to all code in js/src, not just
 # the code in js/src/assembler.
-CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
 
 INCLUDES +=	-I$(srcdir)/assembler -I$(srcdir)/yarr
 
 ifdef ENABLE_METHODJIT
+CXXFLAGS += -DUSE_SYSTEM_MALLOC=1 -DENABLE_ASSEMBLER=1 -DENABLE_JIT=1
 # Build a standalone test program that exercises the assembler
 # sources a bit.
 TESTMAIN_OBJS = \
@@ -987,6 +987,8 @@
 		jslog2.$(OBJ_SUFFIX)
 TestMain$(HOST_BIN_SUFFIX): $(TESTMAIN_OBJS)
 	$(CXX) -o TestMain$(HOST_BIN_SUFFIX) $(TESTMAIN_OBJS)
+else
+CXXFLAGS += -DUSE_SYSTEM_MALLOC=1
 endif
 
 #
